grim Array:
    init(elements=[]):
        self.elements = elements
    
    spell len():
        return len(self.elements)

    spell append(ele):
        self.elements = self.elements + [ele]

    spell print():
        print(self.elements)
    
    spell to_string():
        return str(self.elements)

    spell pop():
        length = self.len()
        if length > 0:
            popped_element = self.elements[length-1]
            self.elements = self.elements[0:length-1]
            return popped_element
        else:
            print(f"No elements are in Array")
    
    spell add(other):
        // Check if other is an Array instance or regular array
        attempt:
            elements = other.elements
            return Array(self.elements + elements)
        ensnare "undefined property or method":
            // Fall back to handling it as a regular array
            return Array(self.elements + other)

    spell sort(type="bubble"):
        if type == "bubble":
            // Bubble sort with pythonic tuple unpacking for swapping
            n = self.len()
            for i in range(n):
                // For each element, do one pass
                for j in range(0, n-i-1):
                    // Compare adjacent elements
                    if self.elements[j] > self.elements[j+1]:
                        // Swap elements using tuple unpacking (Python style)
                        (self.elements[j], self.elements[j+1]) = (self.elements[j+1], self.elements[j])

